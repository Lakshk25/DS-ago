
/*code broke for large test case

5316 272 1148 4390 3725 5700 4368 808 5963 4973 5652 1768 3474 3637 3609 2566 4258 1556 838 8623 6305 4266 8780 460 6473 4610 4510 5980 674 8726 221 1223 5851 5012 7993 1051 218 649 8045 129 5432 5890 7485 4173 5813 1243 842 7750 6740 6714 614 3652 6569 1497 5091 4340 3953 8539 6858 1417 4018 879 8861 1401 2613 6291 6762 5615 7624 976 5471 2226 7652 8342 1967 2081 6426 2554 5035 2704 7304 117 4227 3615 4821 4663 3031 6462 2754 3278 1943 7778 5122 5783 730 5887 930 7918 7888 5226 4441 8392 7888 2047 2512 7174 5238 7131 8640 2373 1059 4818 4963 6563 2144 1624 1908 3702 8209 5023 5562 563 6430 5807 2365 5102 3531 1188 3061 2431 5073 8531 5682 1061 5710 349 8223 5081 338 7402 7927 4030 6898 4524 1806 4770 3593 696 3120 501 2682 8799 5848 8385 7957 5939 3336 6779 7086 2138 4780 1827 8745 4042 3496 1864 8135 2321 7849 3055 4781 7021 4203 5750 4689 102 2312 1786 2454 4875 8626 2748 4348 2332 2201 2985 8854 5306 2316 4080 7705 8212 4251 2062 1688 4499 8799 6024 116 3941 1171 3105 1601 4309 6593 7446 4224 6553 7201 8411 8639 104 4598 2765 1404 7365 4471 6685 6317 1377 3486 7680 1350 2839 8167 116 6616 5925 4183 6383 3135 6307 2652 6224 2850 4760 4769 1198 3345 3048 5250 5075 1692 669 8271 2788 6284 934 7837 4604 6088 6982 8631 1972 2763 1882 7867 133 6998 1262 8761 7732 102 6073 5247 5548 7266 1914 1718 4671 237 3227 8101 5304 7230 6170 7866 598 5142 3418 6449 1317 6048 5935 3504 360 2445 1739 3219 5238 2336 2917 1026 2223 3619 2975 1573 7529 3692 5359 762 3799 2298 7412 3854 3862 4789 4946 7646 3888 4950 4823 264 7876 329 6285 3540 7717 800 1889 5355 1829 6133 5200 4868 107 3426 3906 7799 5307 3150 4544 3521 7377 2251 7404 3468 2676 195 6839 4026 4985 1420 5727 500 2237 2517 5506 5414 4679 6761 98 1174 3946 830 3445 826 8557 6663 3823 3570 8060 4041 4278 1032 650 8181 4893 5276 1967 290 1553 589 2019 7664 3647 286 1601 1282 4137 3406 4997 3671 2666 7274 4136 3339 2891 3237 5057 6482 2112 957 2786 3054 833 8566 7434 4618 7375 1810 3664 2020 6441 1254 5068 2330 6675 597 983 2020 330 4421 3638 3872 3268 6454 4838 2932 2968 834 2240 1833 551 5547 7541 1999 383 7607 6832 8516 3575 8468 7989 1309 282 5507 6119 5360 1401 2756 2566 5687 8281 2060 8208 2994 6154 2341 638 7641 6862 438 1484 4301 582 7566 5903 4396 3984 451 1495 2361 7813 7541 7310 4661 7943 2255 2959 1543 6156 912 7513 6071 6341 2548 2076 5189 6364 6404 2853 7422 6494 7851 3134 4644 8076 3045 912 448 737 6129 6023 3791 1304 2145 1852 2538 3419 7363 2596 5357 24 4583 5716 2084 1200 4262 1033 3353 6785 3842 614 8264 3690 8735 2423 5567 7404 2007 44 3231 8086 2363 5323 7578 8610 5967 1732 2128 6799 2912 5549 5004 5429 3818 1069 8674 2614 6601 3469 8468 6553 5444 7277 3532 610 1379 8571 7389 3076 2531 5647 3632 7623 1356 1704 5422 3437 6423 3758 2761 8466 4087 6535 1316 2820 4037 7361 7690 2928 1116 1285 5240 6502 495 5830 5358 5901 3533 1795 1894 4722 1668 4725 3121 5865 6773 550 7110 8294 1503 303 708 5977 473 6074 237 7115 757 1175 5888 7809 857 7202 1918 4405 2523 4176 7791 2614 512 2918 1688 5926 2274 5085 2143 6937 2825 1446 5024 4401 1145 5924 8273 2685 3847 1615 3283 127 4174 5175 N 2859 2096 2839 4248 1638 8610 131 2362 3169 6219 3241 6488 4696 6082 4136 5334 2850 3703 1371 213 762 4030 2657 3432 556 3660 5843 5281 2752 7016 5705 4822 6046 1002 4413 5147 4460 5962 8206 8293 3284 7278 7957 3982 3729 2867 8740 7825 226 7109 273 5311 7866 6824 280 7385 5565 4746 7992 5648 5611 7542 8721 4343 1392 298 3952 1114 1912 6177 5797 6998 4576 2151 3739 1551 127 8644 2903 7058 5981 8656 1834 3690 4724 5947 8389 597 2502 87 1249 8697 2112 1608 1232 4220 2478 1545 7001 4874 3612 193 7111 2965 1083 2552 7310 5003 7861 1981 2451 2661 3491 182 3236 395 2834 2407 4835 357 4350 1912 795 5733 3324 3110 2985 8684 1390 7332 8525 4916 4500 5237 7575 2392 4950 6895 233 2744 8477 5480 7849 4157 2423 485 5414 6271 4472 2335 3314 1082 8740 8460 3051 8194 8369 7169 4038 2508 791 112 3825 4402 3276 4741 2968 206 4751 4370 1280 585 7067 4530 1476 1611 7311 41 7598 7927 6800 5379 4889 5043 8866 6705 1352 1242 2378 2427 2984 2216 5051 4317 4934 3426 4439 5005 5785 8062 7169 6358 206 1263 3609 5353 3593 7275 4612 1265 1167 1189 1177 6742 4139 512 5771 7853 5769 5882 5631 5846 113 4186 8643 6493 327 8572 535 8574 1561 3830 7611 3412 84 4445 7297 6995 7501 2344 8421 7602 7876 5437 5923 7439 6903 7512 4933 244 83 441 6673 1287 2210 3779 4331 360 668 1495 165 2639 2112 1207 3877 2135 7737 6724 355 1333 2742 7945 2458 2358 3404 1481 6935 4041 4352 2023 1934 2596 8015 2508 5990 1624 6158 6248 2292 3179 2624 383 5436 2714 3893 4686 7079 3321 974 5040 4263 1073 8557 1856 4921 4673 8826 5281 5472 7800 1646 4072 2936 7342 3793 2703 4413 3685 2352 3538 7574 6620 4578 4642 1046 6229 3021 7489 681 3336 3686 1445 1930 5602 7663 1790 5670 8093 4598 6525 2442 5051 2914 7388 4205 1799 4310 3598 3114 6689 4743 7050 7146 8833 1827 2423 8225 6170 727 4549 5353 7067 1876 7212 3916 4410
*/ 

void solve(Node* root , int diff , int &maxDiff , int rootData , int childData){
    
    if(root == NULL)
        return;
    
    // diffrence between root and child node
    diff = rootData - childData;
    // assign only max alue
    maxDiff = max(diff , maxDiff);
    
    // check if root left child exist if exist
    // ya directly function me daal do wese bhi wo tabhi work karega jab child hoga
    // i.e. solve(root -> left , diff , maxDiff , root -> data , root -> left -> data)
    if(root -> left)
        childData = root -> left -> data;
        
    solve(root -> left , diff , maxDiff , root -> data , childData);
    
    // check for right child
    if(root -> right)
        childData = root -> right -> data;
        
    solve(root -> right , diff , maxDiff , root -> data , childData);
}

int maxDiff(Node* root)
{
    int maxDiff = INT_MIN;
    
    // if root left child exist
    if(root -> left)
        solve(root , INT_MIN , maxDiff , root -> data ,  root -> left -> data);
    // if left child not exist
    else
        solve(root , INT_MIN , maxDiff , root -> data , root -> right -> data);
    
    return maxDiff;
}

// this works


int solve(Node* root , int& ans){
    if(root == NULL)
        return INT_MAX;
    
    int left = solve(root -> left ,ans);
    int right = solve(root -> right , ans);

    int diff = root -> data - min(left , right);
    ans = max(ans , diff);
    
    return min(root -> data , min(left , right));
}
int maxDiff(Node* root)
{
    int ans = INT_MIN;
    solve(root , ans);
    return ans;
}



// this works pretty well :)


// simply keep track of max value to current node
// or maxDiff calculate karna he every node pe

void solve(Node* root , int parent , int &maxDiff){
    
    if(root == NULL)
        return;
    // take max diffrence
    maxDiff = max(maxDiff , parent - root -> data);
    
    // change parent if root data if greater to get max diffrence
    parent = max(parent , root -> data);
      
    solve(root -> left , parent , maxDiff);

    solve(root -> right , parent , maxDiff);
}

int maxDiff(Node* root)
{
    int maxDiff = INT_MIN;
    
    // check for left max
    solve(root -> left , root -> data , maxDiff);
    // check for right max
    solve(root -> right , root -> data , maxDiff);
    return maxDiff;
}

